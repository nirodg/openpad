/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mutex;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;

/**
 *
 * @author dorin
 */
public final class FormEditor extends javax.swing.JFrame {

    private String user, ip;
    Client cliente;
    private int contador = 0;

    /**
     * Creates new form FormEditor
     */
    public FormEditor() {
        initComponents();
        setTitle("Mutex - Edicion Colaborativa");
    }

    public FormEditor(String ip, String user) {
        initComponents();


        setVisible(true);
        clienteText.setCaretPosition(0);

        System.out.println("Usuario:" + user);
        System.out.println("Servidor:" + ip);

        cliente = new Client();
        cliente.setIp(ip);
        cliente.setuser(user);

        setTitle("Mutex - Edicion Colaborativa | Cliente: " + cliente.getUser());

        cliente.start();
        cliente.dormir();


        //¿Conectado?

        while (!cliente.isConnected()) { //Funciona
            if (contador > 10) {
                clienteText.setEnabled(false);
                estado.setText("No se ha podido conectar");
                estado.setForeground(Color.red);
                estado.setBackground(Color.black);
                bGuardar.setEnabled(false);
                break;
            } else {
                try {
                    Thread.sleep(100);
                    contador++;
                    estado.setText("Esperando conexión");
                } catch (InterruptedException ex) {
                    Logger.getLogger(FormEditor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }


        ActionListener updater = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                System.err.println("fase 1");
                if (cliente.isConnected()) {
                    try {
                        System.err.println("isconnsect");
                        //cliente.gUp();

                        setCliText(cliente.getText()); //Obtener texto del servidor

                        //¿Bloqueado? - NO EDITAR TEXTO
                        cliente.salidaDatos.writeInt(3);

                        System.err.println("SOLO LECTURA");
                        clienteText.setEditable(false);
                        bGuardar.setEnabled(false);
                        estado.setText("Solo Lectura");
                        estado.setForeground(Color.red);
                        estado.setBackground(Color.black);

                        if (cliente.entrada.readBoolean()) {
                            System.err.println("ESCRITURA/LECTURA");
                            clienteText.setEditable(true);
                            bGuardar.setEnabled(true);
                            estado.setText("Lectura/Escritura");
                            estado.setForeground(Color.black);
                            estado.setBackground(Color.white);
                        }
                        
                        
                        
                    } catch (IOException ex) {
                        Logger.getLogger(FormEditor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    System.err.println("No conectado");
                    clienteText.setEnabled(false);
                    estado.setText("No se ha podido conectar");
                    estado.setForeground(Color.red);
                    estado.setBackground(Color.black);
                    bGuardar.setEnabled(false);
                }
            }
        };
        
        new Timer(1000, updater).start();
        
    }

    public void setCliText(String[] a) {
        String tmpStr = "";
        for (int i = 0; i < a.length; i++) {
            //Comprobar que la posición del Array isnt' Empty
            if (a[i].isEmpty() != true) {
                tmpStr += a[i] + "\n";
            }
            clienteText.setText(tmpStr);
        }
        clienteText.setCaretPosition(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bSalir = new javax.swing.JButton();
        bGuardar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        clienteText = new javax.swing.JTextArea();
        estado = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bSalir.setText("Salir");
        bSalir.setFocusable(false);
        bSalir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSalir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSalirActionPerformed(evt);
            }
        });

        bGuardar.setText("Guardar");
        bGuardar.setFocusable(false);
        bGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bGuardarActionPerformed(evt);
            }
        });

        clienteText.setColumns(20);
        clienteText.setRows(5);
        jScrollPane1.setViewportView(clienteText);

        estado.setText("jLabel1");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(estado)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(bGuardar)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(bSalir))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(bSalir, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bGuardar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(estado, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSalirActionPerformed
        // TODO add your handling code here:
        cliente.parar();
        dispose();
        System.exit(0);
    }//GEN-LAST:event_bSalirActionPerformed

    private void bGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bGuardarActionPerformed
        // TODO add your handling code here:
        cliente.gUp();
    }//GEN-LAST:event_bGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormEditor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bGuardar;
    private javax.swing.JButton bSalir;
    private javax.swing.JTextArea clienteText;
    private javax.swing.JLabel estado;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
